#include <U8glib.h>
#include <Wire.h>
#include <SPI.h>
#include <stdlib.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h> 

#define CURRENT A0
#define TENSION A1
#define N 10 //numero de pontos para media de tensão

#define SCREEN_WIDTH 128 // Largura display, em pixels
#define SCREEN_HEIGHT 64 // Altura display, em pixels
  
// Declaração pino reset para I2C
#define OLED_RESET  -1 // Será o mesmo reset da placa

// Criação objeto display
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
  
// Altura e largura logo (alterar tamanho se necessário)
#define LOGO_WIDTH  128
#define LOGO_HEIGHT   64

// 'Logo Milhagem UFMG Branca', 128x64px
static const unsigned char PROGMEM LogoMilhagem [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0x1c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xe0, 0x1c, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xfe, 0x00, 0x3c, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x00, 0x3c, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xe0, 0x00, 0x78, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x78, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x00, 0x00, 0x78, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xfe, 0x00, 0x00, 0xf8, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xfc, 0x00, 0x00, 0xf8, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf8, 0x00, 0x01, 0xf0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf8, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xf0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xe0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xc0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xc0, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xc0, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0xe3, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0xe7, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xc0, 0x00, 0x70, 0x70, 0xc7, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xc0, 0x00, 0xf0, 0xf0, 0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xe0, 0x00, 0xf0, 0xf0, 0xc7, 0x3b, 0x80, 0x78, 0x0f, 0x01, 0xc0, 0x78, 0xf0, 0x00, 
  0x00, 0x07, 0xe0, 0x00, 0xf1, 0xf1, 0xc7, 0x3f, 0xc1, 0xfc, 0x3f, 0x87, 0xe1, 0xff, 0xf8, 0x00, 
  0x00, 0x07, 0xf0, 0x00, 0xf9, 0xf1, 0xce, 0x39, 0xe3, 0x9c, 0x73, 0x8e, 0x73, 0xcf, 0x38, 0x00, 
  0x00, 0x07, 0xf0, 0x01, 0xfb, 0x71, 0xce, 0x39, 0xe7, 0x1c, 0xe3, 0x9c, 0x73, 0x8e, 0x38, 0x00, 
  0x00, 0x03, 0xf8, 0x01, 0xbb, 0x73, 0x8e, 0x71, 0xcf, 0x1c, 0xe3, 0x9c, 0x73, 0x8e, 0x38, 0x00, 
  0x00, 0x03, 0xfc, 0x01, 0x9e, 0x73, 0x8e, 0x71, 0xce, 0x39, 0xe3, 0x9f, 0xf3, 0x8e, 0x38, 0x00, 
  0x00, 0x01, 0xfc, 0x03, 0x9e, 0x63, 0x9e, 0x71, 0xce, 0x39, 0xc7, 0x1f, 0x03, 0x8e, 0x38, 0x00, 
  0x00, 0x00, 0xfe, 0x03, 0x9c, 0x63, 0x9c, 0x71, 0xce, 0x39, 0xc7, 0x18, 0x07, 0x9c, 0x70, 0x00, 
  0x00, 0x00, 0xfe, 0x03, 0x1c, 0xe3, 0x9c, 0x73, 0xce, 0x39, 0xc7, 0x1c, 0x07, 0x1c, 0x70, 0x00, 
  0x00, 0x00, 0x7c, 0x07, 0x18, 0xe7, 0x1c, 0xe3, 0x87, 0xf8, 0xff, 0x1f, 0xc7, 0x1c, 0x70, 0x00, 
  0x00, 0x00, 0x3c, 0x07, 0x18, 0xe7, 0x1c, 0xe3, 0x83, 0xf0, 0x7f, 0x0f, 0xc7, 0x1c, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xec, 0x63, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0x8c, 0x67, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x0c, 0xec, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9b, 0xce, 0xed, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9b, 0xdf, 0x4d, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x93, 0x17, 0x4c, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb2, 0x12, 0x4d, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x32, 0x47, 0x80, 0x00
};

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NO_ACK);

const double ajuste_corrente = 1.2297601967717135494;

float originalTensao = 0.0; 
float originalCorrente = 0.0; 
float filtradoTensao = 0.0;
float filtradoCorrente = 0.0;
float gasto = 0.0;
float numbersTensao[N];
float numbersCorrente[N];


float mediaMovelTensao();
float mediaMovelCorrente();

void setup() {

  //Incia a Serial
  Serial.begin(115200); 
  pinMode(CURRENT, INPUT);
  pinMode(TENSION, INPUT);

  // SSD1306_SWITCHCAPVCC = gerar tensão para display 3.3V internamente
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // 0x3C sendo o end I2C
    Serial.println(F("Falha alocação SSD1306"));
    for(;;); // Não processado, loop infinito
  }
  // Limpa display
  display.clearDisplay();

  // Chama sub-rotina
  testdrawbitmap();
  // Inverte cores no display
  display.invertDisplay(true);
  // Aguarda 1 s
  delay(1000);
  // Volta às cores originais no display
  display.invertDisplay(false);

  //Zera vetor da media movel


}

void testdrawbitmap(void) {
  // Limpa display
  display.clearDisplay();
  
  // Preenche tela com bitmap
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    LogoMilhagem, LOGO_WIDTH, LOGO_HEIGHT, 1);
  // Exibe no display 
  display.display();

#ifdef AVR_ATmega32U4
  delay(2000);
#endif

  u8g.begin();
}

void loop() {

  /* ------ TENSÃO ------ */

  originalTensao = analogRead(TENSION) * (5/1023.0);
  originalTensao = originalTensao * 9.54; // Vin/Vout=9.54
  filtradoTensao = mediaMovelTensao();

  /* ----- CORRENTE ----- */

  originalCorrente = analogRead(CURRENT);
  originalCorrente = map(originalCorrente, 0, 1023, (-30000), 30000);
  originalCorrente /= 1000; //mA => A
  filtradoCorrente = mediaMovelCorrente();

  /* ------ GASTO ------ */
  
  gasto += filtradoCorrente*ajuste_corrente*filtradoTensao;

  /* ----- DISPLAY ----- */

  Serial.print(filtradoTensao);
  Serial.println(" V");
  Serial.print(filtradoCorrente*ajuste_corrente, 5);
  Serial.println(" mA");
  Serial.print(gasto, 5);
  Serial.println(" J");

  

  u8g.firstPage();
  do {
    u8g.setFont(u8g_font_courR10);
    u8g.setPrintPos(0, 15);
    u8g.print(filtradoTensao);
    u8g.print(" V");

    u8g.setPrintPos(0, 37);
    u8g.print(filtradoCorrente*ajuste_corrente);
    u8g.print(" mA");
    
    u8g.setPrintPos(0, 60);
    u8g.print(gasto);
    u8g.print(" J");

  } while ( u8g.nextPage());

  delay(1000);

}

float mediaMovelTensao(){
  for (int i = N-1; i > 0; i--){
    numbersTensao[i] = numbersTensao[i-1];
  }

  numbersTensao[0]=originalTensao;
  float acc=0;

  for(int i=0; i<N; i++){
    acc+= numbersTensao[i];
  }

  return acc/N;
}


float mediaMovelCorrente(){
  for (int i = N-1; i > 0; i--){
    numbersCorrente[i] = numbersCorrente[i-1];
  }

  numbersCorrente[0]=originalCorrente;
  float acc=0;
  
  for(int i=0; i<N; i++){
    acc+= numbersCorrente[i];
  }

  return acc/N;
}

